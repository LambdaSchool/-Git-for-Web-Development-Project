Stretch git tasks

Merge conflict:   They happen when multiple changes are done over different versions to the same elements, whether they are to the same document or file. Since the changes are to the same file that is trying to merge, there is a conflict as to which version gets added.
	To resolve the conflict, you may need to make changes to the competing lines of code that are causing the conflict. You may also have to resolve the conflict locally before the change gets pushed to the repo.

Commands: pull, rebase, merge:
	pull will get and merge changes from a remote server and merge them into your own working directory.
	rebase change the base of a branch from one commit to a different commit. It will look as if you hav created the new commit from a different one. 'While the base may look the same, it is made of different commits' You would use a rebase to make the version history appear more linear. It will give a cleaner, more logical move when looking back at earlier versions. Conflicts may be more common with a rebase since there might be longer branches off of the master that are not included and need to be incorporated into the new rebased version.
	merge: is used to integrate changes from one branch into another. The branch that receives the changes is the head of the branch tree. Some complications would be merging elements into a stable branch that cause instabilities in the head code of the branch.

Commands: reset, revert, clean
	Reset: reset can do multiple things depending on how it is used. A file reset with just the file name and extension will unstage the file but preserve the contents of the file. A reset with a commit identifier will undo all of the commits that happened after the commit that was specified, but preserve the changes locally. A -hard with a commit identifier will discard all history after the commit specified and will go back to the commit specified.
	Revert: will allow us to move back from a specific commit that we do not want to use anymore, however the commit that we are moving away from will still exist, and we will retain the branch we are working on. It works like an 'undo' for changes that were made. This will leave the 'undid' in the git history and can create clutter.
	Clean: works on untracked files that have been created within the repo's working directory but have not been added to the repo's tracking index. The clean command will remove the untracked files permanently.